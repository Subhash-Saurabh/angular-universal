{
  "_from": "@nguniversal/express-engine@^6.0.0",
  "_id": "@nguniversal/express-engine@6.0.0",
  "_inBundle": false,
  "_integrity": "sha512-BFedPnFZcTDXGY2TedWyY29SVuHq/E6cpFDPN5bw4gn+lAd6m0aVySebQX7s2YPvX9scU/ZuKiOT3PRAKlgv5Q==",
  "_location": "/@nguniversal/express-engine",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "@nguniversal%2fexpress-engine",
    "fetchSpec": "^6.0.0",
    "name": "@nguniversal/express-engine",
    "raw": "@nguniversal/express-engine@^6.0.0",
    "rawSpec": "^6.0.0",
    "registry": true,
    "saveSpec": null,
    "scope": "@nguniversal",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@nguniversal/express-engine/-/express-engine-6.0.0.tgz",
  "_shasum": "f8bc7b5e940afb1ffdbdcb1bb22665d440ea0b0b",
  "_shrinkwrap": null,
  "_spec": "@nguniversal/express-engine@^6.0.0",
  "_where": "/home/next/Desktop/universal",
  "bugs": {
    "url": "https://github.com/angular/universal/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Express Engine for running Server Angular Apps",
  "devDependencies": {},
  "es2015": "./fesm2015/express-engine.js",
  "esm2015": "./esm2015/express-engine_public_index.js",
  "esm5": "./esm5/express-engine_public_index.js",
  "fesm2015": "./fesm2015/express-engine.js",
  "fesm5": "./fesm5/express-engine.js",
  "homepage": "https://github.com/angular/universal",
  "keywords": [
    "express",
    "ssr",
    "universal"
  ],
  "license": "MIT",
  "main": "./bundles/express-engine.umd.js",
  "module": "./fesm5/express-engine.js",
  "name": "@nguniversal/express-engine",
  "ng-update": {
    "packageGroup": [
      "@nguniversal/aspnetcore-engine",
      "@nguniversal/common",
      "@nguniversal/express-engine",
      "@nguniversal/hapi-engine",
      "@nguniversal/module-map-ngfactory-loader"
    ]
  },
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/common": "^6.0.0-rc.0",
    "@angular/core": "^6.0.0-rc.0",
    "@angular/platform-server": "^6.0.0-rc.0",
    "express": "^4.15.2"
  },
  "readme": "# Angular Express Engine\n\nThis is an Express Engine for running Angular Apps on the server for server side rendering.\n\n## Usage\n\n`npm install @nguniversal/express-engine --save`\n\nTo use it, set the engine and then route requests to it\n\n```ts\nimport * as express from 'express';\nimport { ngExpressEngine } from '@nguniversal/express-engine';\n\n// Set the engine\napp.engine('html', ngExpressEngine({\n  bootstrap: ServerAppModule // Give it a module to bootstrap\n}));\n\napp.set('view engine', 'html');\n\napp.get('/**/*', (req: Request, res: Response) => {\n  res.render('../dist/index', {\n    req,\n    res\n  });\n});\n```\n\n## Configuring the URL and Document\n\nIt is possible to override the default URL and document fetched when the rendering engine\nis called. To do so, simply pass in a `url` and/or `document` string to the renderer as follows:\n\n```ts\napp.get('/**/*', (req: Request, res: Response) => {\n  let url = 'http://someurl.com';\n  let doc = '<html><head><title>New doc</title></head></html>';\n  res.render('../dist/index', {\n    req,\n    res,\n    url,\n    document: doc\n  });\n});\n```\n\n## Extra Providers\n\nExtra Providers can be provided either on engine setup\n\n```ts\napp.engine('html', ngExpressEngine({\n  bootstrap: ServerAppModule,\n  providers: [\n    ServerService\n  ]\n}));\n```\n\n## Advanced Usage\n\n### Request based Bootstrap\n\nThe Bootstrap module as well as more providers can be passed on request\n\n```ts\napp.get('/**/*', (req: Request, res: Response) => {\n  res.render('../dist/index', {\n    req,\n    res,\n    bootstrap: OtherServerAppModule,\n    providers: [\n      OtherServerService\n    ]\n  });\n});\n```\n\n### Using the Request and Response\n\nThe Request and Response objects are injected into the app via injection tokens.\nYou can access them by @Inject\n\n```ts\nimport { Request } from 'express';\nimport { REQUEST } from '@nguniversal/express-engine/tokens';\n\n@Injectable()\nexport class RequestService {\n  constructor(@Inject(REQUEST) private request: Request) {}\n}\n```\n\nIf your app runs on the client side too, you will have to provide your own versions of these in the client app.\n\n### Using a Custom Callback\n\nYou can also use a custom callback to better handle your errors\n\n```ts\napp.get('/**/*', (req: Request, res: Response) => {\n  res.render('../dist/index', {\n    req,\n    res\n  }, (err: Error, html: string) => {\n    res.status(html ? 200 : 500).send(html || err.message);\n  });\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular/universal.git"
  },
  "typings": "./express-engine_public_index.d.ts",
  "version": "6.0.0"
}
